[tool:pytest]
# Pytest configuration for enactive consciousness TDD test suite

# Test discovery
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Test directories
testpaths = tests

# Minimum version
minversion = 6.0

# Add options for better test output
addopts = 
    --strict-markers
    --strict-config
    --verbose
    --tb=short
    --maxfail=3
    --durations=10
    --cov=domain
    --cov-report=term-missing
    --cov-report=html:htmlcov
    --cov-fail-under=85
    --hypothesis-show-statistics

# Markers for different test categories
markers =
    unit: Unit tests for individual components
    integration: Integration tests for component interactions
    acceptance: Acceptance tests for user stories and requirements
    property: Property-based tests using Hypothesis
    slow: Tests that take significant time to run
    japanese: Tests for Japanese GUI text and internationalization
    mathematical: Tests for mathematical properties and invariants
    edge_case: Tests specifically for edge cases and boundary conditions
    phase1: Tests for Phase 1 implementation (basic consciousness)
    phase2: Tests for Phase 2 implementation (predictive coding)
    phase3: Tests for Phase 3 implementation (advanced features)
    consciousness: Tests specifically for consciousness detection logic
    predictive_coding: Tests for predictive coding algorithms
    som: Tests for self-organizing map functionality
    bayesian: Tests for Bayesian inference operations
    metacognitive: Tests for metacognitive monitoring
    gui: Tests for GUI responsiveness and rendering
    performance: Performance and scalability tests

# Pytest plugins
required_plugins =
    pytest-cov
    pytest-mock
    pytest-asyncio
    pytest-benchmark
    pytest-xdist

# Test timeout (in seconds)
timeout = 300

# Asyncio configuration
asyncio_mode = auto

# Coverage configuration
[coverage:run]
source = domain
omit = 
    */tests/*
    */test_*
    */__pycache__/*
    */conftest.py
    setup.py

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
    pass
    
precision = 2
show_missing = true
skip_covered = false

[coverage:html]
directory = htmlcov
title = Enactive Consciousness Test Coverage Report